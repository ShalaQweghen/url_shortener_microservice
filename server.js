 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var mongoose = require('mongoose');

var Url = require("./models/url");
var Seq = require("./models/sequence");

var app = express();

mongoose.connect(process.env.DB_URL);
mongoose.Promise = global.Promise;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
      res.sendFile(process.cwd() + '/views/index.html');
    });

app.get("/:id", function(req, res) {
  var id = Number(req.params.id);
  Url.findOne({_id: id}, {_id: false}, function(err, urlDoc) {
    if (err) throw new Error("Database Malfunction");
      
    if (urlDoc) {
      res.redirect(urlDoc.org_url);
    } else {
      res.json({error: "Target not in database!"});
    }
  });
});

app.get("/new/*", function(req, res) {
  // regex from https://stackoverflow.com/a/30229098/7172972
  var validUrl = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/;
  var url = req.params["0"];
  var id, obj = {};

  if (validUrl.test(url)) {
    Seq.findOneAndUpdate({_id: "urls"}, {$inc: {seq: 1}}, {upsert: true}, function(err, doc) {
      if (err) throw new Error("Database Malfunction");
      
      id = doc.seq;
      
      Url.create({_id: id, org_url: url}, function(err, urlDoc) {
        if (err) throw new Error("Database Malfunction");
        
        obj.original_url = url;
        obj.short_url = "https://literate-structure.glitch.me/" + id;
        
        res.json(obj);
      });
    });
  } else {
    res.json({error: "Invalid Url"});
  }
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});